// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: math_operations.proto

#include "math_operations.pb.h"
#include "math_operations.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace math {

static const char* MathService_method_names[] = {
  "/math.MathService/Add",
  "/math.MathService/Subtract",
  "/math.MathService/Multiply",
  "/math.MathService/Divide",
  "/math.MathService/Power",
};

std::unique_ptr< MathService::Stub> MathService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MathService::Stub> stub(new MathService::Stub(channel, options));
  return stub;
}

MathService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Add_(MathService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subtract_(MathService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Multiply_(MathService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Divide_(MathService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Power_(MathService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MathService::Stub::Add(::grpc::ClientContext* context, const ::math::MathRequest& request, ::math::MathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Add_, context, request, response);
}

void MathService::Stub::async::Add(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void MathService::Stub::async::Add(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::math::MathResponse, ::math::MathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Add_, context, request);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MathService::Stub::Subtract(::grpc::ClientContext* context, const ::math::MathRequest& request, ::math::MathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Subtract_, context, request, response);
}

void MathService::Stub::async::Subtract(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Subtract_, context, request, response, std::move(f));
}

void MathService::Stub::async::Subtract(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Subtract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::PrepareAsyncSubtractRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::math::MathResponse, ::math::MathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Subtract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::AsyncSubtractRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubtractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MathService::Stub::Multiply(::grpc::ClientContext* context, const ::math::MathRequest& request, ::math::MathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Multiply_, context, request, response);
}

void MathService::Stub::async::Multiply(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Multiply_, context, request, response, std::move(f));
}

void MathService::Stub::async::Multiply(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Multiply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::math::MathResponse, ::math::MathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Multiply_, context, request);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::AsyncMultiplyRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMultiplyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MathService::Stub::Divide(::grpc::ClientContext* context, const ::math::MathRequest& request, ::math::MathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Divide_, context, request, response);
}

void MathService::Stub::async::Divide(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Divide_, context, request, response, std::move(f));
}

void MathService::Stub::async::Divide(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Divide_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::math::MathResponse, ::math::MathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Divide_, context, request);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::AsyncDivideRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDivideRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MathService::Stub::Power(::grpc::ClientContext* context, const ::math::MathRequest& request, ::math::MathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Power_, context, request, response);
}

void MathService::Stub::async::Power(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Power_, context, request, response, std::move(f));
}

void MathService::Stub::async::Power(::grpc::ClientContext* context, const ::math::MathRequest* request, ::math::MathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Power_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::PrepareAsyncPowerRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::math::MathResponse, ::math::MathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Power_, context, request);
}

::grpc::ClientAsyncResponseReader< ::math::MathResponse>* MathService::Stub::AsyncPowerRaw(::grpc::ClientContext* context, const ::math::MathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPowerRaw(context, request, cq);
  result->StartCall();
  return result;
}

MathService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MathService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MathService::Service, ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MathService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::math::MathRequest* req,
             ::math::MathResponse* resp) {
               return service->Add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MathService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MathService::Service, ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MathService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::math::MathRequest* req,
             ::math::MathResponse* resp) {
               return service->Subtract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MathService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MathService::Service, ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MathService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::math::MathRequest* req,
             ::math::MathResponse* resp) {
               return service->Multiply(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MathService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MathService::Service, ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MathService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::math::MathRequest* req,
             ::math::MathResponse* resp) {
               return service->Divide(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MathService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MathService::Service, ::math::MathRequest, ::math::MathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MathService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::math::MathRequest* req,
             ::math::MathResponse* resp) {
               return service->Power(ctx, req, resp);
             }, this)));
}

MathService::Service::~Service() {
}

::grpc::Status MathService::Service::Add(::grpc::ServerContext* context, const ::math::MathRequest* request, ::math::MathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MathService::Service::Subtract(::grpc::ServerContext* context, const ::math::MathRequest* request, ::math::MathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MathService::Service::Multiply(::grpc::ServerContext* context, const ::math::MathRequest* request, ::math::MathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MathService::Service::Divide(::grpc::ServerContext* context, const ::math::MathRequest* request, ::math::MathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MathService::Service::Power(::grpc::ServerContext* context, const ::math::MathRequest* request, ::math::MathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace math

